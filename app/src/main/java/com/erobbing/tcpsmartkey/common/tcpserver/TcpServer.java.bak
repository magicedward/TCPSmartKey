package com.erobbing.tcpsmartkey.common.tcpserver;

import android.app.Service;
import android.content.Intent;
import android.os.IBinder;
import android.util.Log;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;

public class TcpServer extends Service {

    public static final String TAG = "TcpServer";
    public static Boolean mainThreadFlag = true;
    public static Boolean ioThreadFlag = true;
    ServerSocket serverSocket = null;
    final int SERVER_PORT = 10086;

    //File testFile;
    //private sysBroadcastReceiver sysBR;

    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

    @Override
    public void onCreate() {
        super.onCreate();
        Log.d("chl", "androidService--->onCreate()");
        /* 创建内部类sysBroadcastReceiver 并注册registerReceiver */
        //sysRegisterReceiver();
        /*
         * new Thread() { public void run() { doListen(); }; }.start();
		 */
    }

    private void doListen() {
        serverSocket = null;
        try {
            Log.d("chl", "doListen()");
            serverSocket = new ServerSocket(SERVER_PORT);
            //serverSocket.bind(new InetSocketAddress("172.23.130.24", SERVER_PORT));
            Log.d("chl", "doListen() 2");
            while (mainThreadFlag) {
                Log.d("chl", "doListen() 4");
                Socket socket = serverSocket.accept();
                Log.d("chl", "doListen() 3");
                new Thread(new ThreadSocketIO(this, socket)).start();
            }
        } catch (IOException e) {
            Log.e("chason", e.getMessage());
            e.printStackTrace();
        }
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        Log.d("chl", "androidService----->onStartCommand()");
        mainThreadFlag = true;
        new Thread() {
            public void run() {
                doListen();
            }
        }.start();
        return START_NOT_STICKY;
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        // 关闭线程
        mainThreadFlag = false;
        ioThreadFlag = false;
        // 关闭服务器
        try {
            Log.v(TAG, Thread.currentThread().getName() + "---->" + "serverSocket.close()");
            if (serverSocket != null) serverSocket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        Log.v(TAG, Thread.currentThread().getName() + "---->" + "**************** onDestroy****************");
    }
}
